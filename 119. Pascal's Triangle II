import java.math.BigInteger;
class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer>arr=new ArrayList<>();
        if(rowIndex==0){
            arr.add(1);
            return arr;
        }
        for(int i=0;i<=rowIndex;i++){
            arr.add(combination(rowIndex,i).intValue());
        }
        return arr;
    }
    private BigInteger combination(int i,int j){
        BigInteger x = fact(i);
        BigInteger y = fact(i-j);
        BigInteger z = fact(j);
        return (x.divide(y.multiply(z)));
    }
    private BigInteger fact(int x){
       BigInteger factorial = BigInteger.ONE;
       for(int i=x;i>0;i--){
           factorial = factorial.multiply(BigInteger.valueOf(i));
       }
       return factorial;
    }
}

class Solution {
    public List<Integer> getRow(int r) {
        List<Integer> ans = new ArrayList<>();
        ans.add(1);
        long rem = 1;
        r += 1;
        for(int i=1;i<r;i++){
            rem = rem*(r-i);
            rem = rem/i;
            ans.add((int)rem);
        }
        return ans;
    }
}
