/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<String> result = new ArrayList<>();

    public List<String> binaryTreePaths(TreeNode root) {
        StringBuilder builder = new StringBuilder();
        DFS(root,builder);
        return result;        
    }

    public void DFS(TreeNode root, StringBuilder builder){
        //pre order DFS
        if(root == null) return;

        int length = builder.length();

        //exit of the recursion        
        //root
        if(root.left == null && root.right == null){
            builder.append(root.val);
            result.add(builder.toString());
        }else{
            //not root - > recursion the left -> recursion the right
            builder.append(root.val).append("->");
            DFS(root.left, builder);
            DFS(root.right, builder);
        }

        //backtracking
        builder.setLength(length);
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<String>res = new ArrayList<>();
    public List<String> binaryTreePaths(TreeNode root) {
        path(root, "");
        return res;
    }
    public void path(TreeNode root, String str){
        if(root == null)
            return;
        if(root.left==null && root.right==null){
            str += String.valueOf(root.val);
            res.add(str);
        }
        str += String.valueOf(root.val)+"->";
        String s1 = new String(str);
        String s2 = new String(str);
        path(root.left, s1);
        path(root.right, s2);
    }
}
