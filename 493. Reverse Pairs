class Solution {
    public void merge(int num[], int start, int mid, int end){
        ArrayList<Integer>temp = new ArrayList<>();
        int left = start, right = mid+1;
        while(left<=mid && right<=end){
            if(num[left] <= num[right]){
                temp.add(num[left]);
                left++;
            }
            else{
                temp.add(num[right]);
                right++;
            }
        }
        while(left<=mid){
            temp.add(num[left]);
            left++;
        }
        while(right<=end){
            temp.add(num[right]);
            right++;
        }
        for(int i=start;i<=end;i++){
            num[i] = temp.get(i-start);
        }
    }
    public int countpairs(int arr[], int start, int mid, int end){
        int right = mid+1;
        int c = 0;
        for(int i=start;i<=mid;i++){
            while(right<=end && (long)arr[i]>(long)2*arr[right])
                right++;
            
            c += (right-(mid+1));
        }
        return c;
    }
    public int mergesort(int nums[], int start, int end){
        int c=0;
        if(start>=end)
            return c;
        int mid = (start+end)/2;
        c += mergesort(nums, start, mid);
        c += mergesort(nums, mid+1, end);
        c += countpairs(nums, start, mid, end);
        merge(nums, start, mid, end);
        return c;
    }
    public int reversePairs(int[] nums) {
        return mergesort(nums, 0, nums.length-1);
    }
}
