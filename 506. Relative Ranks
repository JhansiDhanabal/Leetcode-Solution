class Solution {
    public String[] findRelativeRanks(int[] score) {
        int n = score.length;
        int max = 0;
        for (int x : score) {
            if (x > max) {
                max = x;
            }
        }
        int score_idx[] = new int[max + 1];
        for (int i = 0; i < n; i++) {
            score_idx[score[i]] = i + 1;
        }

        String rank[] = new String[n];
        int c = 1;
        String medals[] = { "Gold Medal", "Silver Medal", "Bronze Medal" };

        for (int i = max; i >= 0; i--) {
            if (score_idx[i] != 0) {
                int org_idx = score_idx[i] - 1;
                if (c < 4) {
                    rank[org_idx] = medals[c - 1];
                } else {
                    rank[org_idx] = Integer.toString(c);
                }
                c++;
            }
        }
        return rank;
        
    }
}

class Solution {
    public String[] findRelativeRanks(int[] score) {
        HashMap<Integer, Integer>map = new HashMap<>();
        for(int i=0;i<score.length;i++){
            map.put(score[i],i);
        }
        String str[]=new String[score.length];
        List<Map.Entry<Integer, Integer>>list = new LinkedList<>(map.entrySet());
        Collections.sort(list, (i1,i2)->i2.getKey()-i1.getKey());
        int count=1;
        for(Map.Entry<Integer, Integer>aa:list){
            if(count==1)
                str[aa.getValue()]="Gold Medal";
            else if(count==2)
                str[aa.getValue()]="Silver Medal";
            else if(count==3)
                str[aa.getValue()]="Bronze Medal";
            else
                str[aa.getValue()] = String.valueOf(count);
            count+=1;
        }
        return str;
    }
}
