class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int val = image[sr][sc];
        Queue<pair>queue = new LinkedList<>();
        queue.add(new pair(sr, sc));
        int flag[][] = new int[image.length][image[0].length];
        while(!queue.isEmpty()){
            pair current = queue.remove();
            int x = current.a, y = current.b;
            image[x][y] = color;
            int direction[][] = {{0,-1},{0,1},{-1,0},{1,0}};
            for(int i=0;i<direction.length;i++){
                int u = direction[i][0]+x, v = direction[i][1]+y;
                if(u>=0 && u<image.length && v>=0 && v<image[0].length && image[u][v]==val){
                    if(flag[u][v] == 0){
                        flag[u][v] = 1;
                        queue.add(new pair(u,v));
                    }
                    
                }
            }
        }
        return image;
    }
}
class pair{
    int a; int b;
    pair(int a, int b){
        this.a = a;
        this.b = b;
    }
}

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int inicol=image[sr][sc];
        if(inicol!=color)
        dfs(image, sr, sc, inicol, color);
        return image;
    }
    public void dfs(int [] []image, int sr, int sc, int inicol, int col)
    {
        if(sr<0 || sr>=image.length || sc<0 || sc>=image[0].length || image[sr][sc]!=inicol)
        {
            return;
        }
        image[sr][sc]=col;
        dfs(image,sr+1,sc,inicol,col);
        dfs(image,sr-1,sc,inicol,col);
        dfs(image,sr,sc+1,inicol,col);
        dfs(image,sr,sc-1,inicol,col);
    }
}
